{
  "version": 3,
  "sources": ["../../@timohausmann/quadtree-ts/dist/quadtree.esm.js"],
  "sourcesContent": ["/**\n * Class representing a Quadtree node.\n *\n * @example\n * ```typescript\n * const tree = new Quadtree({\n *   width: 100,\n *   height: 100,\n *   x: 0,           // optional, default:  0\n *   y: 0,           // optional, default:  0\n *   maxObjects: 10, // optional, default: 10\n *   maxLevels: 4,   // optional, default:  4\n * });\n * ```\n *\n * @example Typescript: If you like to be explicit, you optionally can pass in a generic type for objects to be stored in the Quadtree:\n * ```typescript\n * class GameEntity extends Rectangle {\n *   ...\n * }\n * const tree = new Quadtree<GameEntity>({\n *   width: 100,\n *   height: 100,\n * });\n * ```\n */\nclass Quadtree {\n    /**\n     * Quadtree Constructor\n     * @param props - bounds and properties of the node\n     * @param level - depth level (internal use only, required for subnodes)\n     */\n    constructor(props, level = 0) {\n        this.bounds = {\n            x: props.x || 0,\n            y: props.y || 0,\n            width: props.width,\n            height: props.height,\n        };\n        this.maxObjects = (typeof props.maxObjects === 'number') ? props.maxObjects : 10;\n        this.maxLevels = (typeof props.maxLevels === 'number') ? props.maxLevels : 4;\n        this.level = level;\n        this.objects = [];\n        this.nodes = [];\n    }\n    /**\n     * Get the quadrant (subnode indexes) an object belongs to.\n     *\n     * @example Mostly for internal use but you can call it like so:\n     * ```typescript\n     * const tree = new Quadtree({ width: 100, height: 100 });\n     * const rectangle = new Rectangle({ x: 25, y: 25, width: 10, height: 10 });\n     * const indexes = tree.getIndex(rectangle);\n     * console.log(indexes); // [1]\n     * ```\n     *\n     * @param obj - object to be checked\n     * @returns Array containing indexes of intersecting subnodes (0-3 = top-right, top-left, bottom-left, bottom-right).\n     */\n    getIndex(obj) {\n        return obj.qtIndex(this.bounds);\n    }\n    /**\n     * Split the node into 4 subnodes.\n     * @internal\n     *\n     * @example Mostly for internal use! You should only call this yourself if you know what you are doing:\n     * ```typescript\n     * const tree = new Quadtree({ width: 100, height: 100 });\n     * tree.split();\n     * console.log(tree); // now tree has four subnodes\n     * ```\n     */\n    split() {\n        const level = this.level + 1, width = this.bounds.width / 2, height = this.bounds.height / 2, x = this.bounds.x, y = this.bounds.y;\n        const coords = [\n            { x: x + width, y: y },\n            { x: x, y: y },\n            { x: x, y: y + height },\n            { x: x + width, y: y + height },\n        ];\n        for (let i = 0; i < 4; i++) {\n            this.nodes[i] = new Quadtree({\n                x: coords[i].x,\n                y: coords[i].y,\n                width,\n                height,\n                maxObjects: this.maxObjects,\n                maxLevels: this.maxLevels,\n            }, level);\n        }\n    }\n    /**\n     * Insert an object into the node. If the node\n     * exceeds the capacity, it will split and add all\n     * objects to their corresponding subnodes.\n     *\n     * @example you can use any shape here (or object with a qtIndex method, see README):\n     * ```typescript\n     * const tree = new Quadtree({ width: 100, height: 100 });\n     * tree.insert(new Rectangle({ x: 25, y: 25, width: 10, height: 10, data: 'data' }));\n     * tree.insert(new Circle({ x: 25, y: 25, r: 10, data: 512 }));\n     * tree.insert(new Line({ x1: 25, y1: 25, x2: 60, y2: 40, data: { custom: 'property'} }));\n     * ```\n     *\n     * @param obj - Object to be added.\n     */\n    insert(obj) {\n        //if we have subnodes, call insert on matching subnodes\n        if (this.nodes.length) {\n            const indexes = this.getIndex(obj);\n            for (let i = 0; i < indexes.length; i++) {\n                this.nodes[indexes[i]].insert(obj);\n            }\n            return;\n        }\n        //otherwise, store object here\n        this.objects.push(obj);\n        //maxObjects reached\n        if (this.objects.length > this.maxObjects && this.level < this.maxLevels) {\n            //split if we don't already have subnodes\n            if (!this.nodes.length) {\n                this.split();\n            }\n            //add all objects to their corresponding subnode\n            for (let i = 0; i < this.objects.length; i++) {\n                const indexes = this.getIndex(this.objects[i]);\n                for (let k = 0; k < indexes.length; k++) {\n                    this.nodes[indexes[k]].insert(this.objects[i]);\n                }\n            }\n            //clean up this node\n            this.objects = [];\n        }\n    }\n    /**\n     * Return all objects that could collide with the given geometry.\n     *\n     * @example Just like insert, you can use any shape here (or object with a qtIndex method, see README):\n     * ```typescript\n     * tree.retrieve(new Rectangle({ x: 25, y: 25, width: 10, height: 10, data: 'data' }));\n     * tree.retrieve(new Circle({ x: 25, y: 25, r: 10, data: 512 }));\n     * tree.retrieve(new Line({ x1: 25, y1: 25, x2: 60, y2: 40, data: { custom: 'property'} }));\n     * ```\n     *\n     * @param obj - geometry to be checked\n     * @returns Array containing all detected objects.\n     */\n    retrieve(obj) {\n        const indexes = this.getIndex(obj);\n        let returnObjects = this.objects;\n        //if we have subnodes, retrieve their objects\n        if (this.nodes.length) {\n            for (let i = 0; i < indexes.length; i++) {\n                returnObjects = returnObjects.concat(this.nodes[indexes[i]].retrieve(obj));\n            }\n        }\n        //remove duplicates\n        returnObjects = returnObjects.filter(function (item, index) {\n            return returnObjects.indexOf(item) >= index;\n        });\n        return returnObjects;\n    }\n    /**\n     * Clear the Quadtree.\n     *\n     * @example\n     * ```typescript\n     * const tree = new Quadtree({ width: 100, height: 100 });\n     * tree.insert(new Circle({ x: 25, y: 25, r: 10 }));\n     * tree.clear();\n     * console.log(tree); // tree.objects and tree.nodes are empty\n     * ```\n     */\n    clear() {\n        this.objects = [];\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes.length) {\n                this.nodes[i].clear();\n            }\n        }\n        this.nodes = [];\n    }\n}\n\n/**\n * Class representing a Rectangle\n * @typeParam CustomDataType - Type of the custom data property (optional, inferred automatically).\n *\n * @example Without custom data (JS/TS):\n * ```typescript\n * const rectangle = new Rectangle({\n *   x: 10,\n *   y: 20,\n *   width: 30,\n *   height: 40,\n * });\n * ```\n *\n * @example With custom data (JS/TS):\n * ```javascript\n * const rectangle = new Rectangle({\n *   x: 10,\n *   y: 20,\n *   width: 30,\n *   height: 40,\n *   data: {\n *     name: 'Jane',\n *     health: 100,\n *   },\n * });\n * ```\n *\n * @example With custom data (TS):\n * ```typescript\n * interface ObjectData {\n *   name: string\n *   health: number\n * }\n * const entity: ObjectData = {\n *   name: 'Jane',\n *   health: 100,\n * };\n *\n * // Typescript will infer the type of the data property\n * const rectangle1 = new Rectangle({\n *   x: 10,\n *   y: 20,\n *   width: 30,\n *   height: 40,\n *   data: entity,\n * });\n *\n * // You can also pass in a generic type for the data property\n * const rectangle2 = new Rectangle<ObjectData>({\n *   x: 10,\n *   y: 20,\n *   width: 30,\n *   height: 40,\n * });\n * rectangle2.data = entity;\n * ```\n *\n * @example With custom class extending Rectangle (implements {@link RectangleGeometry} (x, y, width, height)):\n * ```javascript\n * // extending inherits the qtIndex method\n * class Box extends Rectangle {\n *\n *   constructor(props) {\n *     // call super to set x, y, width, height (and data, if given)\n *     super(props);\n *     this.content = props.content;\n *   }\n * }\n *\n * const box = new Box({\n *   content: 'Gravity Boots',\n *   x: 10,\n *   y: 20,\n *   width: 30,\n *   height: 40,\n * });\n * ```\n *\n * @example With custom class and mapping {@link RectangleGeometry}:\n * ```javascript\n * // no need to extend if you don't implement RectangleGeometry\n * class Box {\n *\n *   constructor(content) {\n *     this.content = content;\n *     this.position = [10, 20];\n *     this.size = [30, 40];\n *   }\n *\n *   // add a qtIndex method to your class\n *   qtIndex(node) {\n *     // map your properties to RectangleGeometry\n *     return Rectangle.prototype.qtIndex.call({\n *       x: this.position[0],\n *       y: this.position[1],\n *       width: this.size[0],\n *       height: this.size[1],\n *     }, node);\n *   }\n * }\n *\n * const box = new Box('Gravity Boots');\n * ```\n *\n * @example With custom object that implements {@link RectangleGeometry}:\n * ```javascript\n * const player = {\n *   name: 'Jane',\n *   health: 100,\n *   x: 10,\n *   y: 20,\n *   width: 30,\n *   height: 30,\n *   qtIndex: Rectangle.prototype.qtIndex,\n * });\n * ```\n *\n * @example With custom object and mapping {@link RectangleGeometry}:\n * ```javascript\n * // Note: this is not recommended but possible.\n * // Using this technique, each object would have it's own qtIndex method.\n * // Rather add qtIndex to your prototype, e.g. by using classes like shown above.\n * const player = {\n *   name: 'Jane',\n *   health: 100,\n *   position: [10, 20],\n *   size: [30, 40],\n *   qtIndex: function(node) {\n *     return Rectangle.prototype.qtIndex.call({\n *       x: this.position[0],\n *       y: this.position[1],\n *       width: this.size[0],\n *       height: this.size[1],\n *     }, node);\n *   },\n * });\n * ```\n */\nclass Rectangle {\n    constructor(props) {\n        this.x = props.x;\n        this.y = props.y;\n        this.width = props.width;\n        this.height = props.height;\n        this.data = props.data;\n    }\n    /**\n     * Determine which quadrant this rectangle belongs to.\n     * @param node - Quadtree node to be checked\n     * @returns Array containing indexes of intersecting subnodes (0-3 = top-right, top-left, bottom-left, bottom-right)\n     */\n    qtIndex(node) {\n        const indexes = [], boundsCenterX = node.x + (node.width / 2), boundsCenterY = node.y + (node.height / 2);\n        const startIsNorth = this.y < boundsCenterY, startIsWest = this.x < boundsCenterX, endIsEast = this.x + this.width > boundsCenterX, endIsSouth = this.y + this.height > boundsCenterY;\n        //top-right quad\n        if (startIsNorth && endIsEast) {\n            indexes.push(0);\n        }\n        //top-left quad\n        if (startIsWest && startIsNorth) {\n            indexes.push(1);\n        }\n        //bottom-left quad\n        if (startIsWest && endIsSouth) {\n            indexes.push(2);\n        }\n        //bottom-right quad\n        if (endIsEast && endIsSouth) {\n            indexes.push(3);\n        }\n        return indexes;\n    }\n}\n\n/**\n * Class representing a Circle.\n * @typeParam CustomDataType - Type of the custom data property (optional, inferred automatically).\n *\n * @example Without custom data (JS/TS):\n * ```typescript\n * const circle = new Circle({\n *   x: 100,\n *   y: 100,\n *   r: 32,\n * });\n * ```\n *\n * @example With custom data (JS/TS):\n * ```javascript\n * const circle = new Circle({\n *   x: 100,\n *   y: 100,\n *   r: 32,\n *   data: {\n *     name: 'Jane',\n *     health: 100,\n *   },\n * });\n * ```\n *\n * @example With custom data (TS):\n * ```typescript\n * interface ObjectData {\n *   name: string\n *   health: number\n * }\n * const entity: ObjectData = {\n *   name: 'Jane',\n *   health: 100,\n * };\n *\n * // Typescript will infer the type of the data property\n * const circle1 = new Circle({\n *   x: 100,\n *   y: 100,\n *   r: 32,\n *   data: entity,\n * });\n *\n * // You can also pass in a generic type for the data property\n * const circle2 = new Circle<ObjectData>({\n *   x: 100,\n *   y: 100,\n *   r: 32,\n * });\n * circle2.data = entity;\n * ```\n *\n * @example With custom class extending Circle (implements {@link CircleGeometry} (x, y, r)):\n * ```javascript\n * // extending inherits the qtIndex method\n * class Bomb extends Circle {\n *\n *   constructor(props) {\n *     // call super to set x, y, r (and data, if given)\n *     super(props);\n *     this.countdown = props.countdown;\n *   }\n * }\n *\n * const bomb = new Bomb({\n *   countdown: 5,\n *   x: 10,\n *   y: 20,\n *   r: 30,\n * });\n * ```\n *\n * @example With custom class and mapping {@link CircleGeometry}:\n * ```javascript\n * // no need to extend if you don't implement CircleGeometry\n * class Bomb {\n *\n *   constructor(countdown) {\n *     this.countdown = countdown;\n *     this.position = [10, 20];\n *     this.radius = 30;\n *   }\n *\n *   // add a qtIndex method to your class\n *   qtIndex(node) {\n *     // map your properties to CircleGeometry\n *     return Circle.prototype.qtIndex.call({\n *       x: this.position[0],\n *       y: this.position[1],\n *       r: this.radius,\n *     }, node);\n *   }\n * }\n *\n * const bomb = new Bomb(5);\n * ```\n *\n * @example With custom object that implements {@link CircleGeometry}:\n * ```javascript\n * const player = {\n *   name: 'Jane',\n *   health: 100,\n *   x: 10,\n *   y: 20,\n *   r: 30,\n *   qtIndex: Circle.prototype.qtIndex,\n * });\n * ```\n *\n * @example With custom object and mapping {@link CircleGeometry}:\n * ```javascript\n * // Note: this is not recommended but possible.\n * // Using this technique, each object would have it's own qtIndex method.\n * // Rather add qtIndex to your prototype, e.g. by using classes like shown above.\n * const player = {\n *   name: 'Jane',\n *   health: 100,\n *   position: [10, 20],\n *   radius: 30,\n *   qtIndex: function(node) {\n *     return Circle.prototype.qtIndex.call({\n *       x: this.position[0],\n *       y: this.position[1],\n *       r: this.radius,\n *     }, node);\n *   },\n * });\n * ```\n */\nclass Circle {\n    /**\n     * Circle Constructor\n     * @param props - Circle properties\n     * @typeParam CustomDataType - Type of the custom data property (optional, inferred automatically).\n     */\n    constructor(props) {\n        this.x = props.x;\n        this.y = props.y;\n        this.r = props.r;\n        this.data = props.data;\n    }\n    /**\n     * Determine which quadrant this circle belongs to.\n     * @param node - Quadtree node to be checked\n     * @returns Array containing indexes of intersecting subnodes (0-3 = top-right, top-left, bottom-left, bottom-right)\n     */\n    qtIndex(node) {\n        const indexes = [], w2 = node.width / 2, h2 = node.height / 2, x2 = node.x + w2, y2 = node.y + h2;\n        //an array of node origins where the array index equals the node index\n        const nodes = [\n            [x2, node.y],\n            [node.x, node.y],\n            [node.x, y2],\n            [x2, y2],\n        ];\n        //test all nodes for circle intersections\n        for (let i = 0; i < nodes.length; i++) {\n            if (Circle.intersectRect(this.x, this.y, this.r, nodes[i][0], nodes[i][1], nodes[i][0] + w2, nodes[i][1] + h2)) {\n                indexes.push(i);\n            }\n        }\n        return indexes;\n    }\n    /**\n     * Check if a circle intersects an axis aligned rectangle.\n     * @beta\n     * @see https://yal.cc/rectangle-circle-intersection-test/\n     * @param x - circle center X\n     * @param y - circle center Y\n     * @param r - circle radius\n     * @param minX - rectangle start X\n     * @param minY - rectangle start Y\n     * @param maxX - rectangle end X\n     * @param maxY - rectangle end Y\n     * @returns true if circle intersects rectangle\n     *\n     * @example Check if a circle intersects a rectangle:\n     * ```javascript\n     * const circ = { x: 10, y: 20, r: 30 };\n     * const rect = { x: 40, y: 50, width: 60, height: 70 };\n     * const intersect = Circle.intersectRect(\n     *   circ.x,\n     *   circ.y,\n     *   circ.r,\n     *   rect.x,\n     *   rect.y,\n     *   rect.x + rect.width,\n     *   rect.y + rect.height,\n     * );\n     * console.log(circle, rect, 'intersect?', intersect);\n     * ```\n     */\n    static intersectRect(x, y, r, minX, minY, maxX, maxY) {\n        const deltaX = x - Math.max(minX, Math.min(x, maxX));\n        const deltaY = y - Math.max(minY, Math.min(y, maxY));\n        return (deltaX * deltaX + deltaY * deltaY) < (r * r);\n    }\n}\n\n/**\n * Class representing a Line\n * @typeParam CustomDataType - Type of the custom data property (optional, inferred automatically).\n *\n * @example Without custom data (JS/TS):\n * ```typescript\n * const line = new Line({\n *   x1: 10,\n *   y1: 20,\n *   x2: 30,\n *   y2: 40,\n * });\n * ```\n *\n * @example With custom data (JS/TS):\n * ```javascript\n * const line = new Line({\n *   x1: 10,\n *   y1: 20,\n *   x2: 30,\n *   y2: 40,\n *   data: {\n *     name: 'Jane',\n *     health: 100,\n *   },\n * });\n * ```\n *\n * @example With custom data (TS):\n * ```typescript\n * interface ObjectData {\n *   name: string\n *   health: number\n * }\n * const entity: ObjectData = {\n *   name: 'Jane',\n *   health: 100,\n * };\n *\n * // Typescript will infer the type of the data property\n * const line1 = new Line({\n *   x1: 10,\n *   y1: 20,\n *   x2: 30,\n *   y2: 40,\n *   data: entity,\n * });\n *\n * // You can also pass in a generic type for the data property\n * const line2 = new Line<ObjectData>({\n *   x1: 10,\n *   y1: 20,\n *   x2: 30,\n *   y2: 40,\n * });\n * line2.data = entity;\n * ```\n *\n * @example With custom class extending Line (implements {@link LineGeometry} (x1, y1, x2, y2)):\n * ```javascript\n * // extending inherits the qtIndex method\n * class Laser extends Line {\n *\n *   constructor(props) {\n *     // call super to set x1, y1, x2, y2 (and data, if given)\n *     super(props);\n *     this.color = props.color;\n *   }\n * }\n *\n * const laser = new Laser({\n *   color: 'green',\n *   x1: 10,\n *   y1: 20,\n *   x2: 30,\n *   y2: 40,\n * });\n * ```\n *\n * @example With custom class and mapping {@link LineGeometry}:\n * ```javascript\n * // no need to extend if you don't implement LineGeometry\n * class Laser {\n *\n *   constructor(color) {\n *     this.color = color;\n *     this.start = [10, 20];\n *     this.end = [30, 40];\n *   }\n *\n *   // add a qtIndex method to your class\n *   qtIndex(node) {\n *     // map your properties to LineGeometry\n *     return Line.prototype.qtIndex.call({\n *       x1: this.start[0],\n *       y1: this.start[1],\n *       x2: this.end[0],\n *       y2: this.end[1],\n *     }, node);\n *   }\n * }\n *\n * const laser = new Laser('green');\n * ```\n *\n * @example With custom object that implements {@link LineGeometry}:\n * ```javascript\n * const player = {\n *   name: 'Jane',\n *   health: 100,\n *   x1: 10,\n *   y1: 20,\n *   x2: 30,\n *   y2: 40,\n *   qtIndex: Line.prototype.qtIndex,\n * });\n * ```\n *\n * @example With custom object and mapping {@link LineGeometry}:\n * ```javascript\n * // Note: this is not recommended but possible.\n * // Using this technique, each object would have it's own qtIndex method.\n * // Rather add qtIndex to your prototype, e.g. by using classes like shown above.\n * const player = {\n *   name: 'Jane',\n *   health: 100,\n *   start: [10, 20],\n *   end: [30, 40],\n *   qtIndex: function(node) {\n *     return Line.prototype.qtIndex.call({\n *       x1: this.start[0],\n *       y1: this.start[1],\n *       x2: this.end[0],\n *       y2: this.end[1],\n *     }, node);\n *   },\n * });\n * ```\n */\nclass Line {\n    /**\n     * Line Constructor\n     * @param props - Line properties\n     * @typeParam CustomDataType - Type of the custom data property (optional, inferred automatically).\n     */\n    constructor(props) {\n        this.x1 = props.x1;\n        this.y1 = props.y1;\n        this.x2 = props.x2;\n        this.y2 = props.y2;\n        this.data = props.data;\n    }\n    /**\n     * Determine which quadrant this line belongs to.\n     * @beta\n     * @param node - Quadtree node to be checked\n     * @returns Array containing indexes of intersecting subnodes (0-3 = top-right, top-left, bottom-left, bottom-right)\n     */\n    qtIndex(node) {\n        const indexes = [], w2 = node.width / 2, h2 = node.height / 2, x2 = node.x + w2, y2 = node.y + h2;\n        //an array of node origins where the array index equals the node index\n        const nodes = [\n            [x2, node.y],\n            [node.x, node.y],\n            [node.x, y2],\n            [x2, y2],\n        ];\n        //test all nodes for line intersections\n        for (let i = 0; i < nodes.length; i++) {\n            if (Line.intersectRect(this.x1, this.y1, this.x2, this.y2, nodes[i][0], nodes[i][1], nodes[i][0] + w2, nodes[i][1] + h2)) {\n                indexes.push(i);\n            }\n        }\n        return indexes;\n    }\n    /**\n     * check if a line segment (the first 4 parameters) intersects an axis aligned rectangle (the last 4 parameters)\n     * @beta\n     *\n     * @remarks\n     * There is a bug where detection fails on corner intersections\n     * when the line enters/exits the node exactly at corners (45°)\n     * {@link https://stackoverflow.com/a/18292964/860205}\n     *\n     * @param x1 - line start X\n     * @param y1 - line start Y\n     * @param x2 - line end X\n     * @param y2 - line end Y\n     * @param minX - rectangle start X\n     * @param minY - rectangle start Y\n     * @param maxX - rectangle end X\n     * @param maxY - rectangle end Y\n     * @returns true if the line segment intersects the axis aligned rectangle\n     */\n    static intersectRect(x1, y1, x2, y2, minX, minY, maxX, maxY) {\n        // Completely outside\n        if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))\n            return false;\n        // Single point inside\n        if ((x1 >= minX && x1 <= maxX && y1 >= minY && y1 <= maxY) || (x2 >= minX && x2 <= maxX && y2 >= minY && y2 <= maxY))\n            return true;\n        const m = (y2 - y1) / (x2 - x1);\n        let y = m * (minX - x1) + y1;\n        if (y > minY && y < maxY)\n            return true;\n        y = m * (maxX - x1) + y1;\n        if (y > minY && y < maxY)\n            return true;\n        let x = (minY - y1) / m + x1;\n        if (x > minX && x < maxX)\n            return true;\n        x = (maxY - y1) / m + x1;\n        if (x > minX && x < maxX)\n            return true;\n        return false;\n    }\n}\n\nexport { Circle, Line, Quadtree, Rectangle };\n"],
  "mappings": "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",
  "names": []
}
