import "./chunk-RSJERJUL.js";

// node_modules/@timohausmann/quadtree-ts/dist/quadtree.esm.js
var Quadtree = class {
  /**
   * Quadtree Constructor
   * @param props - bounds and properties of the node
   * @param level - depth level (internal use only, required for subnodes)
   */
  constructor(props, level = 0) {
    this.bounds = {
      x: props.x || 0,
      y: props.y || 0,
      width: props.width,
      height: props.height
    };
    this.maxObjects = typeof props.maxObjects === "number" ? props.maxObjects : 10;
    this.maxLevels = typeof props.maxLevels === "number" ? props.maxLevels : 4;
    this.level = level;
    this.objects = [];
    this.nodes = [];
  }
  /**
   * Get the quadrant (subnode indexes) an object belongs to.
   *
   * @example Mostly for internal use but you can call it like so:
   * ```typescript
   * const tree = new Quadtree({ width: 100, height: 100 });
   * const rectangle = new Rectangle({ x: 25, y: 25, width: 10, height: 10 });
   * const indexes = tree.getIndex(rectangle);
   * console.log(indexes); // [1]
   * ```
   *
   * @param obj - object to be checked
   * @returns Array containing indexes of intersecting subnodes (0-3 = top-right, top-left, bottom-left, bottom-right).
   */
  getIndex(obj) {
    return obj.qtIndex(this.bounds);
  }
  /**
   * Split the node into 4 subnodes.
   * @internal
   *
   * @example Mostly for internal use! You should only call this yourself if you know what you are doing:
   * ```typescript
   * const tree = new Quadtree({ width: 100, height: 100 });
   * tree.split();
   * console.log(tree); // now tree has four subnodes
   * ```
   */
  split() {
    const level = this.level + 1, width = this.bounds.width / 2, height = this.bounds.height / 2, x = this.bounds.x, y = this.bounds.y;
    const coords = [
      { x: x + width, y },
      { x, y },
      { x, y: y + height },
      { x: x + width, y: y + height }
    ];
    for (let i = 0; i < 4; i++) {
      this.nodes[i] = new Quadtree({
        x: coords[i].x,
        y: coords[i].y,
        width,
        height,
        maxObjects: this.maxObjects,
        maxLevels: this.maxLevels
      }, level);
    }
  }
  /**
   * Insert an object into the node. If the node
   * exceeds the capacity, it will split and add all
   * objects to their corresponding subnodes.
   *
   * @example you can use any shape here (or object with a qtIndex method, see README):
   * ```typescript
   * const tree = new Quadtree({ width: 100, height: 100 });
   * tree.insert(new Rectangle({ x: 25, y: 25, width: 10, height: 10, data: 'data' }));
   * tree.insert(new Circle({ x: 25, y: 25, r: 10, data: 512 }));
   * tree.insert(new Line({ x1: 25, y1: 25, x2: 60, y2: 40, data: { custom: 'property'} }));
   * ```
   *
   * @param obj - Object to be added.
   */
  insert(obj) {
    if (this.nodes.length) {
      const indexes = this.getIndex(obj);
      for (let i = 0; i < indexes.length; i++) {
        this.nodes[indexes[i]].insert(obj);
      }
      return;
    }
    this.objects.push(obj);
    if (this.objects.length > this.maxObjects && this.level < this.maxLevels) {
      if (!this.nodes.length) {
        this.split();
      }
      for (let i = 0; i < this.objects.length; i++) {
        const indexes = this.getIndex(this.objects[i]);
        for (let k = 0; k < indexes.length; k++) {
          this.nodes[indexes[k]].insert(this.objects[i]);
        }
      }
      this.objects = [];
    }
  }
  /**
   * Return all objects that could collide with the given geometry.
   *
   * @example Just like insert, you can use any shape here (or object with a qtIndex method, see README):
   * ```typescript
   * tree.retrieve(new Rectangle({ x: 25, y: 25, width: 10, height: 10, data: 'data' }));
   * tree.retrieve(new Circle({ x: 25, y: 25, r: 10, data: 512 }));
   * tree.retrieve(new Line({ x1: 25, y1: 25, x2: 60, y2: 40, data: { custom: 'property'} }));
   * ```
   *
   * @param obj - geometry to be checked
   * @returns Array containing all detected objects.
   */
  retrieve(obj) {
    const indexes = this.getIndex(obj);
    let returnObjects = this.objects;
    if (this.nodes.length) {
      for (let i = 0; i < indexes.length; i++) {
        returnObjects = returnObjects.concat(this.nodes[indexes[i]].retrieve(obj));
      }
    }
    returnObjects = returnObjects.filter(function(item, index) {
      return returnObjects.indexOf(item) >= index;
    });
    return returnObjects;
  }
  /**
   * Clear the Quadtree.
   *
   * @example
   * ```typescript
   * const tree = new Quadtree({ width: 100, height: 100 });
   * tree.insert(new Circle({ x: 25, y: 25, r: 10 }));
   * tree.clear();
   * console.log(tree); // tree.objects and tree.nodes are empty
   * ```
   */
  clear() {
    this.objects = [];
    for (let i = 0; i < this.nodes.length; i++) {
      if (this.nodes.length) {
        this.nodes[i].clear();
      }
    }
    this.nodes = [];
  }
};
var Rectangle = class {
  constructor(props) {
    this.x = props.x;
    this.y = props.y;
    this.width = props.width;
    this.height = props.height;
    this.data = props.data;
  }
  /**
   * Determine which quadrant this rectangle belongs to.
   * @param node - Quadtree node to be checked
   * @returns Array containing indexes of intersecting subnodes (0-3 = top-right, top-left, bottom-left, bottom-right)
   */
  qtIndex(node) {
    const indexes = [], boundsCenterX = node.x + node.width / 2, boundsCenterY = node.y + node.height / 2;
    const startIsNorth = this.y < boundsCenterY, startIsWest = this.x < boundsCenterX, endIsEast = this.x + this.width > boundsCenterX, endIsSouth = this.y + this.height > boundsCenterY;
    if (startIsNorth && endIsEast) {
      indexes.push(0);
    }
    if (startIsWest && startIsNorth) {
      indexes.push(1);
    }
    if (startIsWest && endIsSouth) {
      indexes.push(2);
    }
    if (endIsEast && endIsSouth) {
      indexes.push(3);
    }
    return indexes;
  }
};
var Circle = class {
  /**
   * Circle Constructor
   * @param props - Circle properties
   * @typeParam CustomDataType - Type of the custom data property (optional, inferred automatically).
   */
  constructor(props) {
    this.x = props.x;
    this.y = props.y;
    this.r = props.r;
    this.data = props.data;
  }
  /**
   * Determine which quadrant this circle belongs to.
   * @param node - Quadtree node to be checked
   * @returns Array containing indexes of intersecting subnodes (0-3 = top-right, top-left, bottom-left, bottom-right)
   */
  qtIndex(node) {
    const indexes = [], w2 = node.width / 2, h2 = node.height / 2, x2 = node.x + w2, y2 = node.y + h2;
    const nodes = [
      [x2, node.y],
      [node.x, node.y],
      [node.x, y2],
      [x2, y2]
    ];
    for (let i = 0; i < nodes.length; i++) {
      if (Circle.intersectRect(this.x, this.y, this.r, nodes[i][0], nodes[i][1], nodes[i][0] + w2, nodes[i][1] + h2)) {
        indexes.push(i);
      }
    }
    return indexes;
  }
  /**
   * Check if a circle intersects an axis aligned rectangle.
   * @beta
   * @see https://yal.cc/rectangle-circle-intersection-test/
   * @param x - circle center X
   * @param y - circle center Y
   * @param r - circle radius
   * @param minX - rectangle start X
   * @param minY - rectangle start Y
   * @param maxX - rectangle end X
   * @param maxY - rectangle end Y
   * @returns true if circle intersects rectangle
   *
   * @example Check if a circle intersects a rectangle:
   * ```javascript
   * const circ = { x: 10, y: 20, r: 30 };
   * const rect = { x: 40, y: 50, width: 60, height: 70 };
   * const intersect = Circle.intersectRect(
   *   circ.x,
   *   circ.y,
   *   circ.r,
   *   rect.x,
   *   rect.y,
   *   rect.x + rect.width,
   *   rect.y + rect.height,
   * );
   * console.log(circle, rect, 'intersect?', intersect);
   * ```
   */
  static intersectRect(x, y, r, minX, minY, maxX, maxY) {
    const deltaX = x - Math.max(minX, Math.min(x, maxX));
    const deltaY = y - Math.max(minY, Math.min(y, maxY));
    return deltaX * deltaX + deltaY * deltaY < r * r;
  }
};
var Line = class {
  /**
   * Line Constructor
   * @param props - Line properties
   * @typeParam CustomDataType - Type of the custom data property (optional, inferred automatically).
   */
  constructor(props) {
    this.x1 = props.x1;
    this.y1 = props.y1;
    this.x2 = props.x2;
    this.y2 = props.y2;
    this.data = props.data;
  }
  /**
   * Determine which quadrant this line belongs to.
   * @beta
   * @param node - Quadtree node to be checked
   * @returns Array containing indexes of intersecting subnodes (0-3 = top-right, top-left, bottom-left, bottom-right)
   */
  qtIndex(node) {
    const indexes = [], w2 = node.width / 2, h2 = node.height / 2, x2 = node.x + w2, y2 = node.y + h2;
    const nodes = [
      [x2, node.y],
      [node.x, node.y],
      [node.x, y2],
      [x2, y2]
    ];
    for (let i = 0; i < nodes.length; i++) {
      if (Line.intersectRect(this.x1, this.y1, this.x2, this.y2, nodes[i][0], nodes[i][1], nodes[i][0] + w2, nodes[i][1] + h2)) {
        indexes.push(i);
      }
    }
    return indexes;
  }
  /**
   * check if a line segment (the first 4 parameters) intersects an axis aligned rectangle (the last 4 parameters)
   * @beta
   *
   * @remarks
   * There is a bug where detection fails on corner intersections
   * when the line enters/exits the node exactly at corners (45Â°)
   * {@link https://stackoverflow.com/a/18292964/860205}
   *
   * @param x1 - line start X
   * @param y1 - line start Y
   * @param x2 - line end X
   * @param y2 - line end Y
   * @param minX - rectangle start X
   * @param minY - rectangle start Y
   * @param maxX - rectangle end X
   * @param maxY - rectangle end Y
   * @returns true if the line segment intersects the axis aligned rectangle
   */
  static intersectRect(x1, y1, x2, y2, minX, minY, maxX, maxY) {
    if (x1 <= minX && x2 <= minX || y1 <= minY && y2 <= minY || x1 >= maxX && x2 >= maxX || y1 >= maxY && y2 >= maxY)
      return false;
    if (x1 >= minX && x1 <= maxX && y1 >= minY && y1 <= maxY || x2 >= minX && x2 <= maxX && y2 >= minY && y2 <= maxY)
      return true;
    const m = (y2 - y1) / (x2 - x1);
    let y = m * (minX - x1) + y1;
    if (y > minY && y < maxY)
      return true;
    y = m * (maxX - x1) + y1;
    if (y > minY && y < maxY)
      return true;
    let x = (minY - y1) / m + x1;
    if (x > minX && x < maxX)
      return true;
    x = (maxY - y1) / m + x1;
    if (x > minX && x < maxX)
      return true;
    return false;
  }
};
export {
  Circle,
  Line,
  Quadtree,
  Rectangle
};
//# sourceMappingURL=@timohausmann_quadtree-ts.js.map
