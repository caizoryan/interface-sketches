{
  "version": 3,
  "sources": ["../../@timohausmann/quadtree-js/quadtree.js"],
  "sourcesContent": ["/**\n * quadtree-js\n * @version 1.2.5\n * @license MIT\n * @author Timo Hausmann\n */\n\n/* https://github.com/timohausmann/quadtree-js.git v1.2.4 */\n \n/*\nCopyright Â© 2012-2021 Timo Hausmann\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n;(function() {\n\n    /**\n     * The Quadtree uses rectangle objects for all areas (\"Rect\").\n     * All rectangles require the properties x, y, width, height\n     * @typedef {Object} Rect\n     * @property {number} x         X-Position\n     * @property {number} y         Y-Position\n     * @property {number} width     Width\n     * @property {number} height    Height\n     */\n     \n    /**\n     * Quadtree Constructor\n     * @class Quadtree\n     * @param {Rect} bounds                 bounds of the node ({ x, y, width, height })\n     * @param {number} [max_objects=10]     (optional) max objects a node can hold before splitting into 4 subnodes (default: 10)\n     * @param {number} [max_levels=4]       (optional) total max levels inside root Quadtree (default: 4) \n     * @param {number} [level=0]            (optional) depth level, required for subnodes (default: 0)\n     */\n    function Quadtree(bounds, max_objects, max_levels, level) {\n        \n        this.max_objects    = max_objects || 10;\n        this.max_levels     = max_levels || 4;\n        \n        this.level  = level || 0;\n        this.bounds = bounds;\n        \n        this.objects    = [];\n        this.nodes      = [];\n    };\n    \n    \n    /**\n     * Split the node into 4 subnodes\n     * @memberof Quadtree\n     */\n    Quadtree.prototype.split = function() {\n        \n        var nextLevel   = this.level + 1,\n            subWidth    = this.bounds.width/2,\n            subHeight   = this.bounds.height/2,\n            x           = this.bounds.x,\n            y           = this.bounds.y;        \n     \n        //top right node\n        this.nodes[0] = new Quadtree({\n            x       : x + subWidth, \n            y       : y, \n            width   : subWidth, \n            height  : subHeight\n        }, this.max_objects, this.max_levels, nextLevel);\n        \n        //top left node\n        this.nodes[1] = new Quadtree({\n            x       : x, \n            y       : y, \n            width   : subWidth, \n            height  : subHeight\n        }, this.max_objects, this.max_levels, nextLevel);\n        \n        //bottom left node\n        this.nodes[2] = new Quadtree({\n            x       : x, \n            y       : y + subHeight, \n            width   : subWidth, \n            height  : subHeight\n        }, this.max_objects, this.max_levels, nextLevel);\n        \n        //bottom right node\n        this.nodes[3] = new Quadtree({\n            x       : x + subWidth, \n            y       : y + subHeight, \n            width   : subWidth, \n            height  : subHeight\n        }, this.max_objects, this.max_levels, nextLevel);\n    };\n    \n    \n    /**\n     * Determine which node the object belongs to\n     * @param {Rect} pRect      bounds of the area to be checked ({ x, y, width, height })\n     * @return {number[]}       an array of indexes of the intersecting subnodes (0-3 = top-right, top-left, bottom-left, bottom-right / ne, nw, sw, se)\n     * @memberof Quadtree\n     */\n    Quadtree.prototype.getIndex = function(pRect) {\n        \n        var indexes = [],\n            verticalMidpoint    = this.bounds.x + (this.bounds.width/2),\n            horizontalMidpoint  = this.bounds.y + (this.bounds.height/2);    \n\n        var startIsNorth = pRect.y < horizontalMidpoint,\n            startIsWest  = pRect.x < verticalMidpoint,\n            endIsEast    = pRect.x + pRect.width > verticalMidpoint,\n            endIsSouth   = pRect.y + pRect.height > horizontalMidpoint;    \n\n        //top-right quad\n        if(startIsNorth && endIsEast) {\n            indexes.push(0);\n        }\n        \n        //top-left quad\n        if(startIsWest && startIsNorth) {\n            indexes.push(1);\n        }\n\n        //bottom-left quad\n        if(startIsWest && endIsSouth) {\n            indexes.push(2);\n        }\n\n        //bottom-right quad\n        if(endIsEast && endIsSouth) {\n            indexes.push(3);\n        }\n     \n        return indexes;\n    };\n    \n    \n    /**\n     * Insert the object into the node. If the node\n     * exceeds the capacity, it will split and add all\n     * objects to their corresponding subnodes.\n     * @param {Rect} pRect      bounds of the object to be added ({ x, y, width, height })\n     * @memberof Quadtree\n     */\n    Quadtree.prototype.insert = function(pRect) {\n        \n        var i = 0,\n            indexes;\n         \n        //if we have subnodes, call insert on matching subnodes\n        if(this.nodes.length) {\n            indexes = this.getIndex(pRect);\n     \n            for(i=0; i<indexes.length; i++) {\n                this.nodes[indexes[i]].insert(pRect);     \n            }\n            return;\n        }\n     \n        //otherwise, store object here\n        this.objects.push(pRect);\n\n        //max_objects reached\n        if(this.objects.length > this.max_objects && this.level < this.max_levels) {\n\n            //split if we don't already have subnodes\n            if(!this.nodes.length) {\n                this.split();\n            }\n            \n            //add all objects to their corresponding subnode\n            for(i=0; i<this.objects.length; i++) {\n                indexes = this.getIndex(this.objects[i]);\n                for(var k=0; k<indexes.length; k++) {\n                    this.nodes[indexes[k]].insert(this.objects[i]);\n                }\n            }\n\n            //clean up this node\n            this.objects = [];\n        }\n     };\n     \n     \n    /**\n     * Return all objects that could collide with the given object\n     * @param {Rect} pRect      bounds of the object to be checked ({ x, y, width, height })\n     * @return {Rect[]}         array with all detected objects\n     * @memberof Quadtree\n     */\n    Quadtree.prototype.retrieve = function(pRect) {\n         \n        var indexes = this.getIndex(pRect),\n            returnObjects = this.objects;\n            \n        //if we have subnodes, retrieve their objects\n        if(this.nodes.length) {\n            for(var i=0; i<indexes.length; i++) {\n                returnObjects = returnObjects.concat(this.nodes[indexes[i]].retrieve(pRect));\n            }\n        }\n\n        //remove duplicates\n        returnObjects = returnObjects.filter(function(item, index) {\n            return returnObjects.indexOf(item) >= index;\n        });\n     \n        return returnObjects;\n    };\n    \n    \n    /**\n     * Clear the quadtree\n     * @memberof Quadtree\n     */\n    Quadtree.prototype.clear = function() {\n        \n        this.objects = [];\n     \n        for(var i=0; i < this.nodes.length; i++) {\n            if(this.nodes.length) {\n                this.nodes[i].clear();\n              }\n        }\n\n        this.nodes = [];\n    };\n\n    //export for commonJS or browser\n    if(typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        module.exports = Quadtree;\n    } else {\n        window.Quadtree = Quadtree;    \n    }\n\n})();"],
  "mappings": "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",
  "names": []
}
